version: '3.5'

services:

  config-service:
    build:
      context: ./backend/config-service
      dockerfile: Dockerfile
    container_name: config-service
    ports:
      - "8888:8888"
    volumes:
      - ./config-service:/config-service
    networks:
      - microservices-net
    environment:
      - SPRING_PROFILES_ACTIVE=native
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  discovery-service:
    build:
      context: ./backend/discovery-service
      dockerfile: Dockerfile
    container_name: discovery-service
    ports:
      - "8761:8761"
    depends_on:
      config-service:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=native
      - CONFIG_SERVICE_URI=http://config-service:8888
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices-net
    restart: always

  gateway-service:
    build:
      context: ./backend/gateway-api-service
      dockerfile: Dockerfile
    container_name: gateway-service
    ports:
      - "8222:8222"
    depends_on:
      config-service:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    environment:
      - CONFIG_SERVICE_URI=http://config-service:8888
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8222/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices-net
    restart: always

  customer-service:
    build:
      context: ./backend/customer-service
      dockerfile: Dockerfile
    container_name: customer-service
    ports:
      - "8081:8081"
    depends_on:
      config-service:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    environment:
      - CONFIG_SERVICE_URI=http://config-service:8888
      - MONGODB_HOST=${MONGODB_HOST}
      - MONGODB_PORT=${MONGODB_PORT}
      - MONGODB_DATABASE=${MONGODB_DATABASE_CUSTOMER}
      - MONGODB_USERNAME=${MONGODB_USERNAME}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD}
      - MONGODB_AUTH_DATABASE=${MONGODB_AUTH_DATABASE}
      - MONGODB_AUTH_MECHANISM=${MONGODB_AUTH_MECHANISM}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices-net
    restart: always

  product-service:
    build:
      context: ./backend/product-service
      dockerfile: Dockerfile
    container_name: product-service
    ports:
      - "8082:8082"
    depends_on:
      config-service:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - CONFIG_SERVICE_URI=http://config-service:8888
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB_PRODUCT}
      - POSTGRES_URL=${POSTGRES_URL_PRODUCT}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    networks:
      - microservices-net

  order-service:
    build:
      context: ./backend/order-service
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "8083:8083"
    depends_on:
      config-service:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - CONFIG_SERVICE_URI=http://config-service:8888
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB_ORDER}
      - POSTGRES_URL=${POSTGRES_URL_ORDER}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices-net
    restart: always

  payment-service:
    build:
      context: ./backend/payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    ports:
      - "8086:8086"
    depends_on:
      config-service:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - CONFIG_SERVICE_URI=http://config-service:8888
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB_PAYMENT}
      - POSTGRES_URL=${POSTGRES_URL_PAYMENT}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8086/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices-net
    restart: always

  notification-service:
    build:
      context: ./backend/notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "8084:8084"
    depends_on:
      config-service:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    environment:
      - CONFIG_SERVICE_URI=http://config-service:8888
      - MONGODB_HOST=${MONGODB_HOST}
      - MONGODB_PORT=${MONGODB_PORT}
      - MONGODB_DATABASE=${MONGODB_DATABASE_NOTIFICATION}
      - MONGODB_USERNAME=${MONGODB_USERNAME}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD}
      - MONGODB_AUTH_DATABASE=${MONGODB_AUTH_DATABASE}
      - MONGODB_AUTH_MECHANISM=${MONGODB_AUTH_MECHANISM}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8084/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices-net
    restart: always

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - config-service
      - discovery-service
      - gateway-service
      - customer-service
      - product-service
      - order-service
      - payment-service
      - notification-service
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9090/-/healthy" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices-net
    restart: always

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - prometheus
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/api/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices-net
    restart: always

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
    volumes:
      - mongo-data:/data/db
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USERNAME}" ]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
    depends_on:
      - zookeeper
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092" ]
      interval: 30s
      timeout: 10s
      retries: 3

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD", "echo", "ruok", "|", "nc", "localhost", "2181" ]
      interval: 30s
      timeout: 10s
      retries: 3

  zipkin:
    container_name: service_zipkin
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    networks:
      - microservices-net

volumes:
  grafana-storage:
  mongo-data:
  postgres-data:

networks:
  microservices-net:
    driver: bridge